/* google fonts import lato light 300 */
@import url("https://fonts.googleapis.com/css2?family=Lato:wght@300&family=Oswald:wght@200..700&display=swap&family=Oswald:wght@200..700&display=swap");

/* so-called wildcard selector that overrides the default browser styles */
* {
  /* 
    part of the 'css reset', stops browsers applying padding
    by default to certain elements 
    */
  padding: 0;
  /* removes archaic browser margin */
  margin: 0;
  /* 
    any width and height applied to blocks will now include the padding
    and border 
    */
  box-sizing: border-box;
}

/* general styles */

body {
  /* 
  the min-height: 100vh rule tells the browser to make the <body> at least as tall as the viewport. it's a floor, not a ceiling. 
  */
  min-height: 100vh;
  /* enables flex magic on the entire body */
  display: flex;
  /* defaults to row, we want column due to it being a standard webpage */
  flex-direction: column;
  /* generic project styles */
  color: #3a3a3a;
  font-family: "Lato", sans-serif;
}

h1,
h2,
h3 {
  /* note the backup font at the end */
  font-family: "Oswald", sans-serif;
  text-transform: uppercase;
  /* 
  more responsive than the px that was suggested 
  to calculate take what you 
  desire in px then divide it by the rem which is typically 16px
  by default
  */
  letter-spacing: 0.125rem;
  color: #252525;
}

.meetups__hidden-heading {
  display: none;
}

header {
  background-color: #ffffff;
  /* 
  shorthand top/bottom left/right
  rem is set in the html element by default typically at 16px
  in modern browsers
  */
  padding: 0 1rem;
  /* ensures that the header is always visible to the use for nav */
  position: fixed;
  /* ensure that it doesn't get buried under other content */
  z-index: 99;
  /* 
  position: fixed changes default block element behavior
  which normally takes up all available space
  hence the need for a specific width in this case 100%
  */
  width: 100%;
  /* complex syntax, this one creates a subtle shadow */
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
  display: flex;
  /*
  flex row so this horizontally places the first item at the very start of the container,
  the last item at the very end, and then distributes the remaining free space equally between the items
  */
  justify-content: space-between;
  /* flex row so this vertically aligns each child's textual baselines */
  align-items: baseline;
}

/* targets all <a> descendants of the header */
header a {
  /* removing the default hyperlink underline */
  text-decoration: none;
  /* getting rid of the default blue or purple color for hyperlinks */
  color: inherit;
}

.menu {
  /* rem is usually the superior choice over % for font related things */
  font-size: 1.1rem;
  letter-spacing: 0.25rem;
  list-style-type: none;
}

/* 
targets only the children of menu, in-case of nested lists
which a descendant selector like 'menu li' would also target 
*/
.menu > li {
  margin-bottom: 1.1rem;
}

.active {
  border-bottom: 1px solid #252525;
}

/* dropdown menu for navigation bar */
nav {
  /* 
  removes the nav bar from the normal document flow
  takes it to another plane so to speak were it doesn't
  interact with other blocks outside of the z layer
  positioned by default in relation to its nearest
  ancestor
  */
  position: absolute;
  background-color: #ffffff;
  /* take up the full width of the viewport */
  width: 100vw;
  /* 
  align this absolutely positioned item to the left of its
  parent which is in this case the fixed header which im 
  scaling fully to the viewport in-terms of width 
  */
  left: 0;
  /* related to font sizing as text based list so rem best */
  padding: 0 0 0 1rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
  /* won't show by default as needs to be toggled on/off by user */
  display: none;
  /* 
  this ensures the absolutely positioned
  nav dropdown panel starts at the exact bottom of its 
  parent which is the fixed header in this case 
  */
  top: 100%;
}

/* when checked will display the nav elements to the user */
#nav-toggle:checked ~ nav {
  /* 
  nav now behaves like a box level element in the current flow
  when it is checked
  */
  display: block;
}

/* hides the checkbox as we can use the label to click it  */
#nav-toggle {
  display: none;
}

.nav-toggle-label {
  font-size: 2rem;
}

main {
  /* Syntax: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */
  flex: 1 0 auto;
  /* non ideal way to make the main show again after header covered it
  due it being taken out of normal document flow with fixed positioning */
  margin: 47px 0 0 0;
  display: flex;
  flex-direction: column;
}
/* main image on home page */
.hero {
  height: 600px;
  width: 100%;
  background: url(../images/hero-image.webp) no-repeat center center/cover;
  /* so we can position this images text in cover-text absolutely in a relative fashion to this image */
  position: relative;
}

.cover-text {
  /* last value sets opacity in rgba */
  background-color: rgba(241, 109, 107, 0.7);
  /* scaling the divs content responsively in this case text */
  font-size: 1.3rem;
  /* taking the document out of the normal flow, now a relative of its nearest
  non static default ancestor which will be the viewport if all parents have default
  positioning */
  position: absolute;
  /* start it at this distance from bottom of its relatively positioned parent the hero image */
  bottom: 30px;
  /* scale the entire divs width, the text is content */
  width: 80%;
  min-height: 200px;
  padding-top: 40px;
  padding-left: 10px;
}
/* targets the h2 and h3 children of the cover-text div */
.cover-text > h2,
.cover-text > h3 {
  color: #ffffff;
}

.reasons__title {
  text-align: center;
  /* 
  converted from the 280% that was suggested
  this scales font directly hence rem 
  */
  font-size: 2.8rem;
  /* 
  margin shorthand left-right = auto
  auto centers the actual block element itself
  text align just for the content
  */
  margin: 20px auto;
}

.reasons__list {
  margin: 0 20px 20px 20px;
}

.reasons__list div {
  /* 
  Think of each line of text sitting inside an invisible box. The line-height property sets the total height of that box. When you set a line-height that is larger than the font size,
  the extra space is distributed evenly above and below the text itself. This forces the lines apart,
  making the entire block of text appear more spread out vertically and easier to read.
  */
  line-height: 20px;
}

.reasons__list hr {
  border-top: 1px solid #3a3a3a;
  margin: 5px 0;
}

/* 
having this master div container for all of my individual list items with their 
own divs, allows for easy targeting of all individual elements in the list 
*/
.reasons__list p {
  padding: 0 20px;
}

.reasons__card-healthy {
  margin: 0 0 20px 0;
}

.reasons__card-strong {
  margin: 0 0 20px 0;
}

.reasons__card-free {
  margin: 0 0 20px 0;
}

.reasons__card-social {
  /* 
  the div container for this list already adding 20px margin to bottom
  so to have additional whitespace here would require the use of padding
  */
  padding: 0 0 20px 0;
}

.reasons__circle-cover-bg {
  /* 
  shorthand:
  color
  image
  repeat
  position/size
  */
  background: url(../images/reasons-image.webp) no-repeat top center / cover;
  /* already have the 20px bottom margin through its parents parent container */
  margin: 0 auto;
  /* 
  these two values below create a perfect square 
  because both the width and the height are being measured with the same "ruler"(vw),
  setting them to the same value (90vw) forces them to be equal in length. An object with equal width and height is a perfect square.
  */
  width: 90vw;
  height: 90vw;
  /* this creates a circle from the perfect square above */
  border-radius: 50%;
  /* 
  ensures it doesn't take up too much of the viewport in landscape mode on phone
  if not will overflow as the width is a much larger measurement 
  than the height of the available viewport in landscape mode
  */
  max-width: 300px;
  max-height: 300px;
}

.meetups__times {
  display: flex;
  /*
  this allows the flex box to place children on multiple lines instead of 
  just one which is the default behavior 
  */
  flex-wrap: wrap;
  /* background shorthand in the correct expected order */
  background: url(../images/dublin-city.webp) no-repeat center / cover;
}

.meetups__times div {
  /* 
  flex shorthand grow / flex-basis
  non auto value for basis to ensure columns on typical smartphones
  */
  flex: 1 200px;
  padding: 15px;
  /* off white */
  color: #fafafa;
  /* rgba for that useful opacity value at the very end */
  background-color: rgba(0, 0, 0, 0.6);
  text-align: center;
  border: 2px solid white;
}

.meetups__times h3 {
  /* override the heading color set in the more general styles near top */
  color: #fafafa;
}

/* gallery page */
.gallery__photos img {
  /* ensures all gallery images do not leave any whitespace */
  width: 100%;
  /* 
  This is the most frequent and effective solution. It aligns the bottom of the image with the bottom of the line box, eliminating the space. Other values like middle, top, or text-bottom can also work depending on your desired alignment.
  */
  vertical-align: bottom;
}
/* signup webpage */

.signup {
  background: url(../images/signup-image.webp) center / cover;
  /*
  flex grow allows background image in section to take up all available
  space
  in its main parent container
  */
  flex-grow: 1;
  /* targeting what position in the image itself, i want to be my center point */
  background-position: 80%;
}

.signup__form {
  color: #ffffff;
  background-color: rgba(60, 60, 60, 0.6);
  margin: 20% 10% 30% 10%;
  padding: 5% 5%;
}

.signup__form label,
input {
  margin: 0 30px;
}

.signup__title {
  color: #fafafa;
  /* 
  coach suggested px but as these margins relate to text content
  rem would scale in tandem with any increase in the default font size
  that the user could enable in their browser 
  */
  margin: 1.875rem 1.25rem 1.25rem;
}

.signup__radio-btns {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.signup__submit-btn {
  margin: 0 0 30px 0;
  border-radius: 2px;
  background-color: #454b1b;
  color: #fafafa;
  /* 
  tutor said to use 100% but no font-sizes were defined through all of 
  this elements parents and grandparents
  got to the html whose default font size is 16px
  hence 1rem would do the same thing as 100% but is more appropriate for fonts
  typically, as does not rest on complex inheritance hierarchies
  */
  font-size: 1rem;
  /* again px was suggested but rem will allow padding to also scale
  proportionally to any user browser font size change */
  padding: 1rem 2rem;
  /* again px was suggested but rem will allow margin to also scale
  proportionally to any user browser font size change */
  margin: 1.25rem 0 1.875rem 1.875rem;
}

footer {
  background-color: orange;
}

.social-networks {
  text-align: center;
  padding: 20px 0;
  display: flex;
  justify-content: space-evenly;
  list-style-type: none;
}
/* targets all descendants of type i in my social-networks list */
.social-networks i {
  /* use % instead of rem here as no text involved */
  font-size: 160%;
  padding: 5%;
  color: #3a3a3a;
}

@media screen and (min-width: 576px) {
  .gallery__photos {
    column-count: 2;
    column-gap: 0;
  }
}

/* media query for tablets and larger (768px typical standard breakpoint) */
@media screen and (min-width: 768px) {
  nav {
    /* makes nav visible by default on desktop no toggle */
    display: block;
    /* 
    this is crucial as default static positioning would not allow
    me to have any nested elements tied absolutely to the nav bar
    for example if i wanted to add a pop-out search function later 
    */
    position: relative;
    box-shadow: none;
    /* ensure that as a flex item it takes up only enough space to display all content */
    width: fit-content;
    /* pleasant looking whitespace all around the nav elements */
    padding: 1rem;
  }
  /* we want the nav elements to display as row now so this is a great way to do it */
  .menu {
    display: flex;
  }

  .menu > li {
    padding: 1rem;
  }

  .nav-toggle-label {
    display: none;
  }
  /* logo should probably be bigger on larger screens! */
  .logo {
    font-size: 3rem;
    line-height: 4.5rem;
    margin: 0 0.5rem;
  }
  /* not ideal way to do this but main content now hidden partly by header due to
  increased logo font size. so it needs to have a taller margin */
  main {
    margin: 110px 0 0 0;
  }

  .cover-text {
    width: 35%;
    right: 30px;
  }
  /*
  does not merge these two divs in-to one flex container
  merely a quick way to apply flex to both classes at once
  */
  .reasons__health-group,
  .reasons__mental-group {
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .reasons__health-group > div,
  .reasons__mental-group > div {
    width: 75%;
  }

  .reasons__mental-group > div {
    text-align: end;
    align-self: flex-end;
  }

  .gallery__photos {
    column-count: 3;
    column-gap: 0;
  }
  /* signup page */
  .signup {
    background-position: 50%;
    /* so the form child can be positioned absolutely */
    position: relative;
  }
}
/* large devices: laptops and desktops 992px and upwards */
@media screen and (min-width: 992px) {
  /*  */
  .menu a:hover {
    border-bottom: 1px solid #3a3a3a;
  }

  .gallery__photos {
    column-count: 4;
    column-gap: 0;
  }
}

@media screen and (min-width: 1200px) {
  .reasons__list {
    display: flex;
    flex-direction: row;
  }

  .reasons__list > div {
    /* 
    `flex: 1;
      ` is a shorthand in CSS Flexbox that sets `flex-grow: 1;
      `,
      `flex-shrink: 1;
      `,
      and `flex-basis: 0%;
      `. This means the item will grow to fill available space,
      shrink if needed,
      and has an initial size of zero,
      allowing its final size to be primarily determined by the distribution of space within the flex container. It's commonly used to make flex items share space equally and adapt responsively.
    */
    flex: 1;
  }

  .reasons__image {
    order: 0;
  }

  .reasons__mental-group {
    order: 1;
  }

  .reasons__mental-group > div {
    /*  
    Flexbox works on a single level of direct parent-child relationship. If you want a nested element to participate in a flex layout,
    its immediate parent must be declared as a flex container (display: flex; or display: inline-flex; ). This allows you to create complex,
    multi-dimensional layouts by nesting flex containers within each other.
    */
    align-self: flex-start;
  }

  .reasons__health-group > div {
    align-self: flex-end;
  }
}
